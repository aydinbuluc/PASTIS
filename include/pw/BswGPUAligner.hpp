#ifndef DISTAL_BSWGPU_ALIGNER_HPP
#define DISTAL_BSWGPU_ALIGNER_HPP

#include "PairwiseFunction.hpp"



class
BswGPUAligner : public PairwiseFunction
{

public:


	BswGPUAligner ();



	void apply (uint64_t l_col_idx, uint64_t g_col_idx,
			    uint64_t l_row_idx, uint64_t g_row_idx,
			    seqan::Peptide *seq_h, seqan::Peptide *seq_v,
				pastis::CommonKmers &cks, std::stringstream& ss)
		override;



	void
  	apply_batch (seqan::StringSet<seqan::Gaps<seqan::Peptide>> &seqsh,
				 seqan::StringSet<seqan::Gaps<seqan::Peptide>> &seqsv,
				 uint64_t *lids, uint64_t col_offset, uint64_t row_offset,
				 PSpMat<pastis::CommonKmers>::Tuples &mattuples,
				 std::ofstream &afs, std::ofstream &lfs)
		override;



	void
	apply_batch_sc (seqan::StringSet<seqan::Peptide> &seqsh,
					seqan::StringSet<seqan::Peptide> &seqsv,
					uint64_t *lids, uint64_t col_offset, uint64_t row_offset,
					PSpMat<pastis::CommonKmers>::Tuples &mattuples,
					std::ofstream &afs, std::ofstream &lfs)
		override;




	// 1D Blosum62 
	// static const short sc_mat_[];

private:

	

	
};



// const short BswGPUAligner::sc_mat_[] =
// 	{ 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,
// 	  0, -2, -1,  0, -4, -1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3,
// 	 -2, -1, -1, -3, -2, -3, -1,  0, -1, -4, -2,  0,  6,  1, -3,  0,  0,  0,  1,
// 	 -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4, -2, -2,  1,  6,
// 	 -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1,
// 	 -4,  0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2,
// 	 -2, -1, -3, -3, -2, -4, -1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0,
// 	 -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4, -1,  0,  0,  2, -4,  2,  5, -2,
// 	  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4,  0, -2,  0,
// 	 -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2,
// 	 -1, -4, -2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2,
// 	 -2,  2, -3,  0,  0, -1, -4, -1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,
// 	  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4, -1, -2, -3, -4, -1, -2, -3,
// 	 -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4, -1,  2,
// 	  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,
// 	  1, -1, -4, -1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1,
// 	 -1, -1, -1,  1, -3, -1, -1, -4, -2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0,
// 	 -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4, -1, -2, -2, -1, -3, -1,
// 	 -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4,  1,
// 	 -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,
// 	  0,  0,  0, -4,  0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,
// 	  1,  5, -2, -2,  0, -1, -1,  0, -4, -3, -3, -4, -4, -2, -2, -3, -2, -2, -3,
// 	 -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4, -2, -2, -2, -3, -2,
// 	 -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4,
// 	  0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,
// 	  4, -3, -2, -1, -4, -2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3,
// 	 -2,  0, -1, -4, -3, -3,  4,  1, -1, -4, -1,  0,  0,  1, -3,  3,  4, -2,  0,
// 	 -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4,  0, -1, -1, -1,
// 	 -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1,
// 	 -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,
// 	 -4, -4, -4, -4, -4,  1
// 	};

#endif
